#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Estructura de datos para los nodos del árbol
typedef struct Nodo {
    char nombre[50];
    struct Nodo *izquierda;
    struct Nodo *derecha;
} Nodo;

// Funciones para los nodos del árbol
Nodo *crear_nodo(char nombre[]) {
    Nodo *nuevo_nodo = (Nodo*) malloc(sizeof(Nodo));
    strcpy(nuevo_nodo->nombre, nombre);
    nuevo_nodo->izquierda = NULL;
    nuevo_nodo->derecha = NULL;
    return nuevo_nodo;
}

Nodo *agregar_nodo(Nodo *raiz, char nombre[]) {
    if (raiz == NULL) {
        return crear_nodo(nombre);
    }
    if (strcmp(raiz->nombre, nombre) < 0) {
        raiz->derecha = agregar_nodo(raiz->derecha, nombre);
    } else {
        raiz->izquierda = agregar_nodo(raiz->izquierda, nombre);
    }
    return raiz;
}

void imprimir_arbol(Nodo *raiz) {
    if (raiz == NULL) {
        return;
    }
    imprimir_arbol(raiz->izquierda);
    printf("%s\n", raiz->nombre);
    imprimir_arbol(raiz->derecha);
}


//arbol con los codigos anteriores para poner en un mismo programa.

int main() {
    // Crear árbol vacío
    Nodo *raiz = NULL;

    // Agregar nodos al árbol
    raiz = agregar_nodo(raiz, "Matemáticas");
    raiz = agregar_nodo(raiz, "Física");
    raiz = agregar_nodo(raiz, "Química");
    raiz = agregar_nodo(raiz, "Biología");

    // Imprimir árbol
    imprimir_arbol(raiz);

    // Crear listas vacías
    Estudiante *estudiantes = NULL;
    Materia *materias = NULL;

    // Dar de alta materias
    alta_materia(&materias, "Matemáticas", 0);
    alta_materia(&materias, "Física", 0);

    // Anotar estudiantes en materias
    anotar_estudiante_materia(estudiantes, materias);
    anotar_estudiante_materia(estudiantes->siguiente, materias->siguiente);

    // Rendir materias
    rendir_materia(estudiantes, "Matemáticas", 80);
    rendir_materia(estudiantes->siguiente, "Física", 90);

    // Mostrar lista de materias rendidas
    printf("Lista de materias rendidas:\n");
    mostrar_materias_rendidas(materias);

    return 0;
}
